-- I'm both amazed and scared of myself right now.

@include io
@include string

func update begin
    define header as index 0 of os.args

    define updateFile as "updates/"
    append header to updateFile
    set updateFile to do string.replace updateFile " " "_" 
    append ".md" to updateFile

    if not do file.exists updateFile then
        error "Seems like the file doesn't exists. Check the name." updateFile
    end

    define newMainContent as ["## Last Update`n"]
    define updateContents as do file.readAllLines updateFile

    foreach line in updateContents begin
        append line to newMainContent
    end

    append "`n## History`n" to newMainContent

    -- New History Entry
    define tmpArr as [ "- [", header, "](https://github.com/The2ndSlimShady/The2ndSlimShady/blob/master/", updateFile, ") - [" ]
    define datetime_t as {System::DateTime}
    define datetime as datetime_t:Now
    append variable->ClrToVar datetime->ToString "dd/MM/yyyy" to tmpArr 
    append "]" to tmpArr 
    append do string.concat tmpArr to newMainContent

    define oldUpdatesFile as do file.openOrCreate "updates.md" fileAccess.read false
    define oldReader as do file.createReader oldUpdatesFile

    while true begin
        define line as do file.readLine oldReader
        if = line "## History" then
            break
        elif = line "EOF" then
            error "Unexpected EOF in updates.md before History"
        end
    end

    define oldHistory as do file.readLine oldReader

    if = oldHistory string.empty then
        set oldHistory to do file.readLine oldReader
    end

    while != oldHistory "EOF" begin
        append oldHistory to newMainContent
        set oldHistory to do file.readLine oldReader
    end

    define tmpFile as do file.create "tmpMain.md" fileAccess.write
    define tmpWriter as do file.createWriter tmpFile

    foreach line in newMainContent begin
        do file.writeLine tmpWriter line true
    end

    tmpWriter->Close
    oldReader->Close

    file_t->Delete "updates.md"
    do file.rename "tmpMain.md" "updates.md"

    write "[Update Script] Successfully updated updates.md"
end

func list begin
    write "All Entries:"
    define allEntries as do directory.getFiles "updates/"
    foreach entry in allEntries begin
        set update to do string.replace update "updates/" ""
        set update to do string.replace update "_" " "
        set update to do string.replace update ".md" ""
        write "`t" entry 
    end
end

func help begin
    write "Usage:"
    write "`tupdate help: print this message"
    write "`tupdate list: lists all updates under `updates` directory"
    write "`tupdate <name>: updates with given update"
    write "`n`t(That's a lot of updates)"
end

-- Handle CLI
define cmd as "help" 
if != os.argc 0 then
    set cmd to index 0 of os.args
end

if = "help" cmd then
    do help
elif = "list" cmd then
    do list
elif > os.argc 1 then
    error "Just the update name is enough. No need for more" "Honestly"
else
    do update
end
